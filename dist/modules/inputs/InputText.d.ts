import { InputHTMLAttributes, ReactElement, ChangeEvent } from 'react';
type ExposedNativeInputProps = 'placeholder' | 'type' | 'value' | 'disabled' | 'readOnly' | 'onPaste' | 'onKeyDown' | 'onKeyPress' | 'onChange' | 'maxLength' | 'min' | 'autoComplete' | 'name' | 'required' | 'defaultValue' | 'pattern';
type Variant = 'normal';
export type InputProps = {
    variant?: Variant;
    disabled?: boolean;
    fullWidth?: boolean;
    endIcon?: ReactElement;
    isInvalid?: boolean;
    isError?: boolean;
    error?: string | any;
    label?: string;
    placeholder?: string;
    type?: string;
    hint?: string;
    actionEndIcon?: ReactElement;
    onClickEndICon?: () => void;
    onActionEndIcon?: () => void;
    showIconAction?: boolean;
    width?: string;
    padding?: string;
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
} & Pick<InputHTMLAttributes<HTMLInputElement>, ExposedNativeInputProps>;
declare const Input: import("react").ForwardRefExoticComponent<{
    variant?: "normal" | undefined;
    disabled?: boolean | undefined;
    fullWidth?: boolean | undefined;
    endIcon?: ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    isInvalid?: boolean | undefined;
    isError?: boolean | undefined;
    error?: string | any;
    label?: string | undefined;
    placeholder?: string | undefined;
    type?: string | undefined;
    hint?: string | undefined;
    actionEndIcon?: ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    onClickEndICon?: (() => void) | undefined;
    onActionEndIcon?: (() => void) | undefined;
    showIconAction?: boolean | undefined;
    width?: string | undefined;
    padding?: string | undefined;
    onChange?: ((e: ChangeEvent<HTMLInputElement>) => void) | undefined;
} & Pick<InputHTMLAttributes<HTMLInputElement>, ExposedNativeInputProps> & import("react").RefAttributes<HTMLInputElement>>;
export default Input;
